import os
import json
import time
import argparse
import requests
import pandas as pd
from datetime import datetime
from tqdm import tqdm
from dotenv import load_dotenv

# Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
load_dotenv()
OPENROUTER_KEY = os.getenv("OPEN_GENERATE")

class RoomContentGenerator:
    """T·∫°o ti√™u ƒë·ªÅ v√† m√¥ t·∫£ h·∫•p d·∫´n cho ph√≤ng tr·ªç t·ª´ th√¥ng tin ƒë·∫ßu v√†o"""
    
    def __init__(self, output_dir="generated_content"):
        self.output_dir = output_dir
        os.makedirs(output_dir, exist_ok=True)
        
        self.models = {
            "gemini": {
                "provider": "openrouter",
                "model": "google/gemini-2.0-flash-exp:free"
            },
            # C√≥ th·ªÉ th√™m c√°c model kh√°c
            # "claude": {
            #     "provider": "openrouter", 
            #     "model": "anthropic/claude-3-haiku"
            # },
            # "gpt4": {
            #     "provider": "openrouter",
            #     "model": "openai/gpt-4o-mini"
            # }
        }
        
        self.results = []
        self.timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        self.output_file = os.path.join(self.output_dir, f"room_content_{self.timestamp}.csv")
        
    def create_content_generation_prompt(self, room_info):
        """T·∫°o prompt ƒë·ªÉ sinh ti√™u ƒë·ªÅ v√† m√¥ t·∫£ h·∫•p d·∫´n"""
        
        system_prompt = """B·∫°n l√† m·ªôt chuy√™n gia marketing b·∫•t ƒë·ªông s·∫£n chuy√™n vi·∫øt n·ªôi dung qu·∫£ng c√°o ph√≤ng tr·ªç v√† cƒÉn h·ªô cho thu√™.
Nhi·ªám v·ª• c·ªßa b·∫°n l√† t·∫°o ra nh·ªØng ti√™u ƒë·ªÅ v√† m√¥ t·∫£ C·ª∞C K·ª≤ H·∫§P D·∫™N, l√¥i cu·ªën kh√°ch h√†ng thu√™ ph√≤ng.

Y√™u c·∫ßu:
- Ti√™u ƒë·ªÅ: Ng·∫Øn g·ªçn (t·ªëi ƒëa 80 k√Ω t·ª±), n·ªïi b·∫≠t, t·∫°o c·∫£m gi√°c kh·∫©n c·∫•p ho·∫∑c ƒë·ªôc ƒë√°o
- M√¥ t·∫£: Chi ti·∫øt (150-300 t·ª´), sinh ƒë·ªông, t·∫°o c·∫£m x√∫c t√≠ch c·ª±c, nh·∫•n m·∫°nh l·ª£i √≠ch
- S·ª≠ d·ª•ng t·ª´ ng·ªØ t√≠ch c·ª±c, emoji ph√π h·ª£p
- T·∫°o c·∫£m gi√°c "kh√¥ng th·ªÉ b·ªè l·ª°"
- Nh·∫•n m·∫°nh ƒëi·ªÉm m·∫°nh, che ƒë·∫≠y ƒëi·ªÉm y·∫øu m·ªôt c√°ch kh√©o l√©o

Tr·∫£ l·ªùi theo ƒë·ªãnh d·∫°ng JSON:
{
    "title": "ti√™u ƒë·ªÅ h·∫•p d·∫´n",
    "description": "m√¥ t·∫£ chi ti·∫øt v√† l√¥i cu·ªën"
}"""

        # X·ª≠ l√Ω th√¥ng tin ph√≤ng
        room_details = []
        
        if room_info.get('room_name'):
            room_details.append(f"T√™n ph√≤ng: {room_info['room_name']}")
        
        if room_info.get('room_type'):
            room_details.append(f"Lo·∫°i ph√≤ng: {room_info['room_type']}")
            
        if room_info.get('area'):
            room_details.append(f"Di·ªán t√≠ch: {room_info['area']}m¬≤")
            
        if room_info.get('price'):
            try:
                price = float(room_info['price'])
                room_details.append(f"Gi√° thu√™: {price:,.0f}ƒë/th√°ng")
            except (ValueError, TypeError):
                room_details.append(f"Gi√° thu√™: {room_info['price']}")
            
        if room_info.get('address'):
            room_details.append(f"ƒê·ªãa ch·ªâ: {room_info['address']}")
            
        if room_info.get('ward'):
            room_details.append(f"Ph∆∞·ªùng/X√£: {room_info['ward']}")
            
        if room_info.get('district'):
            room_details.append(f"Qu·∫≠n/Huy·ªán: {room_info['district']}")
            
        if room_info.get('city'):
            room_details.append(f"Th√†nh ph·ªë: {room_info['city']}")
            
        if room_info.get('amenities'):
            amenities = room_info['amenities']
            if isinstance(amenities, list):
                amenities = ", ".join(amenities)
            room_details.append(f"Ti·ªán nghi: {amenities}")
            
        if room_info.get('nearby_facilities'):
            facilities = room_info['nearby_facilities']
            if isinstance(facilities, list):
                facilities = ", ".join(facilities)
            room_details.append(f"Ti·ªán √≠ch xung quanh: {facilities}")
            
        if room_info.get('furniture'):
            furniture = room_info['furniture']
            if isinstance(furniture, list):
                furniture = ", ".join(furniture)
            room_details.append(f"N·ªôi th·∫•t: {furniture}")
            
        if room_info.get('utilities'):
            utilities = room_info['utilities']
            if isinstance(utilities, list):
                utilities = ", ".join(utilities)
            room_details.append(f"D·ªãch v·ª•: {utilities}")
            
        if room_info.get('special_features'):
            features = room_info['special_features']
            if isinstance(features, list):
                features = ", ".join(features)
            room_details.append(f"ƒê·∫∑c ƒëi·ªÉm n·ªïi b·∫≠t: {features}")
            
        if room_info.get('target_tenant'):
            room_details.append(f"Ph√π h·ª£p cho: {room_info['target_tenant']}")
            
        if room_info.get('deposit'):
            try:
                deposit = float(room_info['deposit'])
                room_details.append(f"Ti·ªÅn c·ªçc: {deposit:,.0f}ƒë")
            except (ValueError, TypeError):
                room_details.append(f"Ti·ªÅn c·ªçc: {room_info['deposit']}")
            
        if room_info.get('contract_duration'):
            room_details.append(f"Th·ªùi h·∫°n thu√™: {room_info['contract_duration']}")
            
        if room_info.get('move_in_date'):
            room_details.append(f"Ng√†y c√≥ th·ªÉ v√†o ·ªü: {room_info['move_in_date']}")
            
        # Th√™m c√°c tr∆∞·ªùng kh√°c n·∫øu c√≥
        for key, value in room_info.items():
            if key not in ['room_name', 'room_type', 'area', 'price', 'address', 
                          'ward', 'district', 'city', 'amenities', 'nearby_facilities',
                          'furniture', 'utilities', 'special_features', 'target_tenant',
                          'deposit', 'contract_duration', 'move_in_date'] and value:
                room_details.append(f"{key}: {value}")
            
        room_info_text = "\n".join(room_details)
        
        user_prompt = f"""Th√¥ng tin ph√≤ng tr·ªç:
{room_info_text}

H√£y t·∫°o ti√™u ƒë·ªÅ v√† m√¥ t·∫£ C·ª∞C K·ª≤ H·∫§P D·∫™N cho ph√≤ng n√†y. Ph·∫£i l√†m cho ng∆∞·ªùi ƒë·ªçc c·∫£m th·∫•y "WOW" v√† mu·ªën thu√™ ngay l·∫≠p t·ª©c!

L∆∞u √Ω khi vi·∫øt:
- N·∫øu gi√° t·ªët (d∆∞·ªõi 3 tri·ªáu) th√¨ nh·∫•n m·∫°nh "GI√Å C·ª∞C ∆ØU ƒê√ÉI" üí∞
- N·∫øu v·ªã tr√≠ ƒë·∫πp (g·∫ßn trung t√¢m, tr∆∞·ªùng h·ªçc, b·ªánh vi·ªán) th√¨ nh·∫•n m·∫°nh "V·ªä TR√ç V√ÄNG" üìç
- N·∫øu di·ªán t√≠ch l·ªõn (tr√™n 20m¬≤) th√¨ nh·∫•n m·∫°nh "R·ªòNG R√ÉII THO√ÅNG M√ÅT" üè†
- N·∫øu ti·ªán nghi ƒë·∫ßy ƒë·ªß th√¨ nh·∫•n m·∫°nh "FULL N·ªòI TH·∫§T, V√ÄO ·ªû NGAY" ‚ú®
- N·∫øu an ninh t·ªët th√¨ nh·∫•n m·∫°nh "AN TO√ÄN TUY·ªÜT ƒê·ªêI" üîí
- T·∫°o c·∫£m gi√°c khan hi·∫øm "S·∫ÆP H·∫æT PH√íNG", "C∆† H·ªòI CU·ªêI C√ôNG" ‚è∞
- S·ª≠ d·ª•ng c√°c t·ª´ kh√≥a t√≠ch c·ª±c: sang tr·ªçng, hi·ªán ƒë·∫°i, ti·ªán l·ª£i, y√™n tƒ©nh

Tr·∫£ l·ªùi b·∫±ng JSON nh∆∞ y√™u c·∫ßu."""

        return system_prompt, user_prompt
    
    def get_openrouter_response(self, model_name, system_prompt, user_prompt, max_retries=3, backoff_time=10):
        """G·ª≠i request t·ªõi OpenRouter API"""
        url = "https://openrouter.ai/api/v1/chat/completions"
        headers = {
            "Authorization": f"Bearer {OPENROUTER_KEY}",
            "Content-Type": "application/json",
            "HTTP-Referer": "https://homenest.com",
            "X-Title": "Room Content Generator"
        }
        payload = {
            "model": model_name,
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            "temperature": 0.8,  # TƒÉng creativity
            "max_tokens": 1000
        }

        for attempt in range(max_retries):
            try:
                response = requests.post(url, headers=headers, json=payload, timeout=30)
                response.raise_for_status()
                content = response.json()["choices"][0]["message"]["content"]
                
                # Th·ª≠ parse JSON response
                try:
                    # T√¨m JSON trong response (c√≥ th·ªÉ c√≥ text kh√°c xung quanh)
                    start_idx = content.find('{')
                    end_idx = content.rfind('}') + 1
                    if start_idx != -1 and end_idx != -1:
                        json_str = content[start_idx:end_idx]
                        parsed_json = json.loads(json_str)
                        
                        # Validate response
                        if "title" in parsed_json and "description" in parsed_json:
                            return parsed_json
                        else:
                            raise json.JSONDecodeError("Missing required fields", "", 0)
                    else:
                        # N·∫øu kh√¥ng t√¨m th·∫•y JSON, tr·∫£ v·ªÅ format m·∫∑c ƒë·ªãnh
                        return {
                            "title": "üè† Ph√≤ng ƒë·∫πp gi√° t·ªët - Thu√™ ngay k·∫ªo l·ª°! ‚è∞",
                            "description": content[:500] + "..." if len(content) > 500 else content
                        }
                except json.JSONDecodeError:
                    return {
                        "title": "‚ú® Ph√≤ng tr·ªç ch·∫•t l∆∞·ª£ng - Gi√° c·ª±c h·ª£p l√Ω! üí∞",
                        "description": content[:500] + "..." if len(content) > 500 else content
                    }
                    
            except requests.exceptions.HTTPError as e:
                if response.status_code == 429:
                    print(f"‚è∞ L·ªói 429: Qu√° nhi·ªÅu y√™u c·∫ßu, ƒë·ª£i {backoff_time}s... (l·∫ßn {attempt+1}/{max_retries})")
                    time.sleep(backoff_time)
                    backoff_time *= 2  # Exponential backoff
                else:
                    print(f"‚ùå L·ªói API: {e}")
                    return {"title": "Error", "description": f"API Error: {str(e)}"}
            except requests.exceptions.Timeout:
                print(f"‚è∞ Timeout, th·ª≠ l·∫°i l·∫ßn {attempt+1}/{max_retries}")
                time.sleep(2)
            except Exception as e:
                print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
                return {"title": "Error", "description": f"Unknown Error: {str(e)}"}
                
        return {"title": "Error", "description": "ƒê√£ th·ª≠ t·ªëi ƒëa s·ªë l·∫ßn retry nh∆∞ng v·∫´n th·∫•t b·∫°i"}

    def generate_content_for_room(self, room_info):
        """T·∫°o n·ªôi dung cho m·ªôt ph√≤ng"""
        room_name = room_info.get('room_name', room_info.get('title', 'Kh√¥ng t√™n'))
        print(f"üè† T·∫°o n·ªôi dung cho ph√≤ng: {room_name}")
        
        system_prompt, user_prompt = self.create_content_generation_prompt(room_info)
        
        result = {
            "room_info": room_info,
            "timestamp": datetime.now().isoformat(),
            "generated_content": {}
        }
        
        for model_id, config in self.models.items():
            print(f"ü§ñ S·ª≠ d·ª•ng model: {model_id}")
            start_time = time.time()
            content = self.get_openrouter_response(config["model"], system_prompt, user_prompt)
            end_time = time.time()
            
            result["generated_content"][model_id] = {
                "title": content.get("title", ""),
                "description": content.get("description", ""),
                "generation_time": end_time - start_time
            }
            
            print(f"‚úÖ Ho√†n th√†nh trong {end_time - start_time:.2f}s")
            time.sleep(1)  # Tr√°nh spam API
            
        self.results.append(result)
        self.save_results()
        return result
    
    def generate_content_from_csv(self, csv_file_path):
        """T·∫°o n·ªôi dung t·ª´ file CSV ch·ª©a th√¥ng tin ph√≤ng"""
        try:
            print(f"üìÅ ƒê·ªçc file CSV: {csv_file_path}")
            df = pd.read_csv(csv_file_path, encoding='utf-8')
            print(f"üìä T√¨m th·∫•y {len(df)} ph√≤ng trong file")
            
            for index, row in tqdm(df.iterrows(), total=len(df), desc="üè† T·∫°o n·ªôi dung"):
                room_info = row.to_dict()
                # X√≥a c√°c gi√° tr·ªã NaN v√† None
                room_info = {k: v for k, v in room_info.items() 
                           if pd.notna(v) and v is not None and str(v).strip() != ''}
                self.generate_content_for_room(room_info)
                
        except FileNotFoundError:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {csv_file_path}")
        except Exception as e:
            print(f"‚ùå L·ªói ƒë·ªçc file CSV: {e}")
    
    def generate_content_from_json(self, json_file_path):
        """T·∫°o n·ªôi dung t·ª´ file JSON ch·ª©a danh s√°ch ph√≤ng"""
        try:
            print(f"üìÅ ƒê·ªçc file JSON: {json_file_path}")
            with open(json_file_path, 'r', encoding='utf-8') as f:
                rooms_data = json.load(f)
                
            if isinstance(rooms_data, list):
                print(f"üìä T√¨m th·∫•y {len(rooms_data)} ph√≤ng trong file")
                for room_info in tqdm(rooms_data, desc="üè† T·∫°o n·ªôi dung"):
                    self.generate_content_for_room(room_info)
            else:
                print("üìä T·∫°o n·ªôi dung cho 1 ph√≤ng")
                self.generate_content_for_room(rooms_data)
                
        except FileNotFoundError:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {json_file_path}")
        except json.JSONDecodeError:
            print(f"‚ùå File JSON kh√¥ng h·ª£p l·ªá: {json_file_path}")
        except Exception as e:
            print(f"‚ùå L·ªói ƒë·ªçc file JSON: {e}")
    
    def save_results(self):
        """L∆∞u k·∫øt qu·∫£ v√†o file"""
        # L∆∞u JSON
        json_file = os.path.join(self.output_dir, f"generated_content_{self.timestamp}.json")
        with open(json_file, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, ensure_ascii=False, indent=2)
        
        # L∆∞u CSV
        rows = []
        for item in self.results:
            room_info = item["room_info"]
            timestamp = item["timestamp"]
            
            for model_id, content in item["generated_content"].items():
                row = {
                    "timestamp": timestamp,
                    "model": model_id,
                    "room_name": room_info.get("room_name", ""),
                    "room_type": room_info.get("room_type", ""),
                    "area": room_info.get("area", ""),
                    "price": room_info.get("price", ""),
                    "address": room_info.get("address", ""), 
                    "district": room_info.get("district", ""),
                    "city": room_info.get("city", ""),
                    "generated_title": content.get("title", ""),
                    "generated_description": content.get("description", ""),
                    "generation_time": content.get("generation_time", 0)
                }
                
                # Th√™m c√°c tr∆∞·ªùng kh√°c t·ª´ room_info v·ªõi prefix "original_"
                for key, value in room_info.items():
                    if key not in row and value:
                        row[f"original_{key}"] = value
                        
                rows.append(row)
        
        if rows:
            df = pd.DataFrame(rows)
            df.to_csv(self.output_file, index=False, encoding='utf-8')
            print(f"üíæ ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o: {self.output_file}")
            print(f"üìÅ File JSON: {json_file}")

    def preview_content(self, room_info, model="gemini"):
        """Xem tr∆∞·ªõc n·ªôi dung ƒë∆∞·ª£c t·∫°o cho m·ªôt ph√≤ng (kh√¥ng l∆∞u file)"""
        print(f"üëÄ Xem tr∆∞·ªõc n·ªôi dung cho ph√≤ng: {room_info.get('room_name', 'Kh√¥ng t√™n')}")
        
        system_prompt, user_prompt = self.create_content_generation_prompt(room_info)
        
        if model in self.models:
            content = self.get_openrouter_response(self.models[model]["model"], system_prompt, user_prompt)
            
            print("\n" + "="*60)
            print(f"üìù TI√äU ƒê·ªÄ: {content.get('title', '')}")
            print("="*60)
            print(f"üìñ M√î T·∫¢:\n{content.get('description', '')}")
            print("="*60)
            
            return content
        else:
            print(f"‚ùå Model '{model}' kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. C√°c model c√≥ s·∫µn: {list(self.models.keys())}")
            return None

def main():
    parser = argparse.ArgumentParser(description="Room Content Generator - T·∫°o ti√™u ƒë·ªÅ v√† m√¥ t·∫£ h·∫•p d·∫´n cho ph√≤ng tr·ªç")
    
    # Input options
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument("--csv", type=str, help="File CSV ch·ª©a th√¥ng tin ph√≤ng")
    group.add_argument("--json", type=str, help="File JSON ch·ª©a th√¥ng tin ph√≤ng")
    group.add_argument("--room-info", type=str, help="JSON string ch·ª©a th√¥ng tin m·ªôt ph√≤ng")
    group.add_argument("--preview", type=str, help="Xem tr∆∞·ªõc n·ªôi dung cho m·ªôt ph√≤ng (JSON string)")
    
    # Options
    parser.add_argument("--output", type=str, default="generated_content", 
                       help="Th∆∞ m·ª•c l∆∞u k·∫øt qu·∫£ (m·∫∑c ƒë·ªãnh: generated_content)")
    parser.add_argument("--model", type=str, default="gemini", 
                       help="Model s·ª≠ d·ª•ng cho preview (m·∫∑c ƒë·ªãnh: gemini)")

    args = parser.parse_args()

    # T·∫°o generator
    generator = RoomContentGenerator(output_dir=args.output)
    
    try:
        if args.csv:
            generator.generate_content_from_csv(args.csv)
        elif args.json:
            generator.generate_content_from_json(args.json)
        elif args.room_info:
            room_info = json.loads(args.room_info)
            generator.generate_content_for_room(room_info)
        elif args.preview:
            room_info = json.loads(args.preview)
            generator.preview_content(room_info, args.model)
            
    except json.JSONDecodeError:
        print("‚ùå L·ªói: JSON kh√¥ng h·ª£p l·ªá")
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  ƒê√£ d·ª´ng b·ªüi ng∆∞·ªùi d√πng")
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

if __name__ == "__main__":
    main()